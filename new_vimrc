"" vim-plug Plugins {
call plug#begin('~/.vim/plugged')

" Sensible - VIM defaults that everybody agrees on {
Plug 'tpope/vim-sensible'

" }

" Spell check and grammar {
set nospell
" Toggle spell check
" http://hacktux.com/vim-spell-check/
" TODO: add spellfile in dropbox
nmap <silent> <leader>sp :setlocal spell!<CR>
set spelllang=en_us
" https://github.com/rhysd/vim-grammarous
Plug 'rhysd/vim-grammarous'

" }

" NERDTree {
" https://github.com/scrooloose/nerdtree
Plug 'scrooloose/nerdtree'
map <F2> :NERDTreeToggle<CR>
" Store the bookmarks file
let NERDTreeBookmarksFile=expand("$HOME/Dropbox/vim/NERDTreeBookmarks")
" https://github.com/Xuyuanp/nerdtree-git-plugin
Plug 'Xuyuanp/nerdtree-git-plugin'

" }

" Commentary - Comment stuff out. {
Plug 'tpope/vim-commentary'
autocmd FileType terraform setlocal commentstring=#\ %s

" }

" Colorscheme Plugins {
" https://github.com/flazz/vim-colorschemes
Plug 'flazz/vim-colorschemes'
" https://github.com/chriskempson/base16-vim
Plug 'chriskempson/base16-vim'

" }

" TMUX Plugins {
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'

" }

" Tabular - Align text {
" https://github.com/godlygeek/tabular
" http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
Plug 'godlygeek/tabular'

" }

" todo-txt {
" https://github.com/todotxt/todo.txt-cli
" https://github.com/todotxt/todo.txt-cli/blob/master/USAGE.md
" https://github.com/freitass/todo.txt-vim
Plug 'freitass/todo.txt-vim'

" }

" vim-better-whitespace - Strip whitespaces {
" https://github.com/ntpeters/vim-better-whitespace
Plug 'ntpeters/vim-better-whitespace'

" }

" vim-terraform - Plugin from HashiVim {
Plug 'hashivim/vim-terraform'
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" }

" vim-gitgutter - A Vim plugin which shows a git diff in the 'gutter' {
Plug 'airblade/vim-gitgutter'

" }

" vim-tmux-navigator - Navigate seamlessly between vim and tmux splits {
" Provides C-hjkl shortcuts in vim
Plug 'christoomey/vim-tmux-navigator'

" }

" tomtom/tinykeymap_vim - Use single key shortcuts to trigger commands {
" https://github.com/tomtom/tinykeymap_vim
Plug 'tomtom/tinykeymap_vim'
let g:tinykeymap#map#tabs#map='<leader>gt'

" }

" Markdown Plugins {
" You can view a list when you try to autocomplete on :setfiletype (i.e. with
" Tab after a space).
let g:markdown_fenced_languages = ['bash=sh', 'vim', 'conf', 'config', 'terraform']
let g:markdown_folding = 1

" https://github.com/rhysd/vim-gfm-syntax
Plug 'rhysd/vim-gfm-syntax'
" https://github.com/vitalk/vim-simple-todo
Plug 'vitalk/vim-simple-todo'
Plug 'jamshedvesuna/vim-markdown-preview'
let vim_markdown_preview_hotkey='<C-m>'          " Mapping Control M
let vim_markdown_preview_browser='Google Chrome'
" GitHub flavoured markdown you need to install Python grip `pip install grip`
let vim_markdown_preview_github=1
let vim_markdown_preview_temp_file=1             " Remove the rendered preview file

" Generate table of contents for Markdown files
" https://github.com/mzlogin/vim-markdown-toc
Plug 'mzlogin/vim-markdown-toc'


" }

" Supertab - use <Tab> for all your insert completion needs {
" https://github.com/ervandew/supertab
Plug 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "<c-n>"

" }

" Full path fuzzy file, buffer, mru, tag, ... finder for Vim. {
" https://github.com/ctrlpvim/ctrlp.vim
Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_working_path_mode = 'ra'
" https://coderwall.com/p/5xv7sq/ctrlp-root-markers
let g:ctrlp_root_markers = ['.ctrlp']

" }

" Provides mappings to easily delete, change and add such surroundings in pairs. {
" https://github.com/tpope/vim-surround
Plug 'tpope/vim-surround'

" }
" Repeat.vim remaps . in a way that plugins can tap into it. {
" https://github.com/tpope/vim-repeat
Plug 'tpope/vim-repeat'
" }
" A light and configurable statusline/tabline plugin {
" https://github.com/itchyny/lightline.vim
Plug 'itchyny/lightline.vim'
" }

" List ends here. Plugins become visible to Vim after this call.
call plug#end()
"" }

"" Basic Configuration {
set number     " Line numbers on
set modeline   " Read infile vim settings
set cursorline " Highlight current line
set mouse=a    " Automatically enable mouse usage
set mousehide  " Hide the mouse cursor while typing
set autoindent                 " Indentation
set autoread                   " Automatically read a file changed outside of vim
set splitright               " Puts new vsplit windows to the right of the current
set splitbelow               " Puts new split windows to the bottom of the current
set t_Co=256
" Search {
set ignorecase  " Ignore case sensitive search
set smartcase   " Case sensitive search when uc present
set hlsearch                   " Highlight search results
set incsearch                  " Find as you type search"
" }
" Backup {
set nobackup
set noswapfile
set nowritebackup
" }
" Tabs {
" Ref and more settings here: http://tedlogan.com/techblog3.html
set softtabstop=2
set shiftwidth=2
set expandtab
" }
" Show hidden characters {
set list
set listchars=tab:→\ ,eol:↵,trail:▢,extends:↷,precedes:↶
" }
" Folds {
set nofoldenable
set foldmethod=syntax
set foldmarker={,}
set foldcolumn=3
" }

" `gx` to opening url on Mac {
let g:netrw_browsex_viewer="google"

" }

" End of basic configuration }

"" Maps {
" Remappings - Custom shortcuts {

" Source and Edit vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Quit vim without saving
nnoremap <Leader>q  :q<CR>
nnoremap <Leader>Q  :qa!<CR>

" Quick command mode
nnoremap ; :

" Redo
nnoremap U <C-r>

" Visual shifting (does not exit Visual mode). Keeps the selection in place
vnoremap < <gv
vnoremap > >gv
" }
"" Abbreviations {
" Insert date
inoreabbrev Tdate <c-r>=strftime("%Y-%m-%d")<cr>
" }
"" }
"
"" Clipboard {
if has('unnamedplus')
  set clipboard=unnamedplus,unnamed
else
  set clipboard+=unnamed
endif

"" }

"" Colorscheme Configuration {
silent! colorscheme molokai

" Take the base16 colortheme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
  " Check highlighting with `:verbose hi <SpellBad>`
  " highlight SpellBad cterm=underline ctermbg=0 ctermfg=1 gui=undercurl
  " Error highlight need to be changed due to highlighted cursorline
  " https://github.com/chriskempson/base16-vim/issues/151
  highlight Error term=reverse ctermfg=6 ctermbg=1
  " Spell highlighting do not show with base16
  highlight SpellBad term=reverse cterm=underline ctermbg=9 guisp=Red
  highlight SpellLocal term=reverse ctermbg=9 gui=undercurl guisp=Red
  highlight SpellCap term=reverse ctermbg=12 gui=undercurl guisp=Blue
  highlight SpellRare term=reverse ctermbg=13 gui=undercurl guisp=Magenta
endif

"" Show text rulers - Highlight column 80 as well as 120 and onward {
"" http://stackoverflow.com/questions/2447109/showing-a-different-background-colour-in-vim-past-80-characters
let &colorcolumn="80,".join(range(120,999),",")
"" Alternatives, example:
" highlight ColorColumn ctermbg=235 guibg=#2c2d27
" let &colorcolumn=join(range(81,999),",")
"" }


"" }

" vim: foldmethod=marker foldcolumn=4 foldenable
