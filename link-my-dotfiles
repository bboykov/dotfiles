#!/usr/bin/env bash

set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

readonly DOTFILES_HOME="${HOME}/dotfiles"

declare -A files_map

while read -r src dst; do
  files_map[${src}]=${dst}
done <<EOL
inputrc             .inputrc
gitconfig           .gitconfig
gitmessage.txt      .gitmessage.txt
gitignore_global    .gitignore_global
bash_profile        .bash_profile
profile             .profile
bashrc              .bashrc
bash_aliases        .bash_aliases
bash_alias_funcs    .bash_alias_funcs
bashrc_macos        .bashrc_macos
bashrc_linux        .bashrc_linux
liquidpromptrc      .liquidpromptrc
vimrc               .vimrc
tmux.conf           .tmux.conf
coc-settings.json   .vim/coc-settings.json
EOL

error_message() {
  echo "[ERROR]: $*" >&2
}

create_link() {
  local src=$1
  local dst=$2
  local old_dotfiles_backup_directory="${HOME}/.old_dotfiles_backup_directory"
  local dst_dirname="${dst%/*}"
  local dst_filename="${dst##*/}"

  if [[ ! -f "${src}" && ! -d "${src}" ]]; then
    error_message "Source file not found: $src"
    return
  elif [[ ! -d "${dst_dirname}" ]]; then
    error_message "Destination does not exist: ${dst_dirname}"
    return
  fi

  # Move only if there is a file and it is not a symlink
  if [[ -e "${dst}" && ! -L "${dst}" ]]; then
    echo "Moving existing ${dst_filename} to ${old_dotfiles_backup_directory}"

    if [ ! -d "${old_dotfiles_backup_directory}" ]; then
      mkdir -p "${old_dotfiles_backup_directory}"
    fi

    mv "${dst}" "${old_dotfiles_backup_directory}/${dst_filename}-$(date +%Y%m%d-%H%M%S)"
  fi

  # Create symlink if there isn't already a healthy symlink
  if [ ! -h "${dst}" ] || [ ! -e "${dst}" ]; then
    echo -n "Create symlink ${dst} ... "
    ln -sf "${src}" "${dst}"
    echo "done"
  else
    echo "Skipped. Link exists at ${dst}"
  fi

}

link_config_files() {
  local config_files_directory="${DOTFILES_HOME}/config"

  echo "Link config files:"
  for file in "${!files_map[@]}"; do
    create_link "${config_files_directory}/${file}" "${HOME}/${files_map[${file}]}"
  done

  echo "======================================================================"

}

link_scripts() {
  local scripts_directory="${DOTFILES_HOME}/scripts"
  local home_bin="${HOME}/bin"

  if [ ! -d "${home_bin}" ]; then
    mkdir -p "${home_bin}"
    echo "${home_bin} created."
  fi

  echo "Link scripts:"
  for script in "${scripts_directory}"/*; do
    scriptname="$(basename "${script}")"
    create_link "${script}" "${home_bin}/${scriptname}"
  done

  echo "======================================================================"
}

link_vscode_settings() {
  ### TODO: find better way to sync vscode settings, extentions and others
  local config_files_directory="${DOTFILES_HOME}/config"

  echo "Link vscode settings:"
  # Load OS specific configuration
  if [[ "${OSTYPE}" == "darwin"* ]]; then
    create_link "${config_files_directory}/vscode/settings.json" "${HOME}/Library/Application Support/Code/User/settings.json"
  elif [[ "${OSTYPE}" == "linux-gnu" ]]; then
    create_link "${config_files_directory}/vscode/settings.json" "${HOME}/.config/Code/User/settings.json"
  fi

  echo "======================================================================"
}

main() {
  link_config_files
  link_scripts
  link_vscode_settings
}

main "$@"
